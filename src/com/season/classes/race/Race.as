package com.season.classes.race {  import flash.display.*;  import flash.events.*;  import flash.utils.*;  import fl.transitions.Tween;  import fl.transitions.TweenEvent;  import com.season.*;  import com.season.classes.race.grid.*;  import com.season.classes.race.rideritem.*;  import com.season.classes.race.transitions.*;  import com.season.models.*;  import com.season.components.*;  import mylibrary.utils.anim.*;  import mylibrary.utils.*;  /**********************   *   * Race   *   **********************/  public class Race extends TweeningSprite {    /**********************     * VARIABLES     **********************/    private var _vGrid:VertRaceGrid;    private var _hGrid:HorzRaceGrid;    private var _vGridWidth:int = 0;    private var _hGridHeight:int = 0;    private var _riders:TweeningSprite = new TweeningSprite();    private var _finalRiders:Sprite = new Sprite();    private var _nonFinalRiders:TweeningSprite = new TweeningSprite();    private var _riderItemsList:Array = new Array();    private var _finalRiderItemsList:Array = new Array();    private var _finalLapOutline:FinalLapOutline = new FinalLapOutline();    private var _podiumOutline:PodiumOutline = new PodiumOutline();    private var _podium:PodiumDisplay;    private var _options:RaceOptions = new RaceOptions();        private var _speedBars:TweeningSprite = new TweeningSprite();    //----//    private var _finalItemPool:ObjectPool;    private var _itemPool:ObjectPool;    private var _speedBarPool:ObjectPool;    //----//    private var _transToLap:TransitionToLap;    private var _transToGap:TransitionToGap;    private var _transToSpeed:TransitionToSpeed;        private var _transRaceToRace:RaceToRaceTransition;    private var _currRaceView:String = "LAP";    //----//    private var _hideTweenGroup:TweenGroup = new TweenGroup();    //----//    public static const GRID_X_SPACING:Number = 30;    public static const GRID_Y_SPACING:Number = 30;    public static const RACE_GAP_TIME_RANGE:int = 60;    public static const RACE_GAP_HEIGHT_RANGE:int = 550;    public static const RIDER_ITEM_MOUSE_OVER:String = "rideritemmouseover";        /**********************     * CONSTRUCTOR     **********************/    public function Race() {       _podium = new PodiumDisplay(this);      _vGrid = new VertRaceGrid(this);      _hGrid = new HorzRaceGrid(this);      addChild(_vGrid);      addChild(_hGrid);      addChild(_podium);      addChild(_riders);      addChild(_options);      _riders.addChild(_nonFinalRiders);      _riders.addChild(_finalRiders);      _riders.addChild(_speedBars);      _speedBars.alpha = 0;      _speedBars.mouseEnabled = false;      _speedBars.mouseChildren = false;      _nonFinalRiders.addChild(_podiumOutline);      _nonFinalRiders.addChild(_finalLapOutline);      _nonFinalRiders.alpha = 0;      //transitions      _transToLap = new TransitionToLap(this);      _transToGap = new TransitionToGap(this);      _transToSpeed = new TransitionToSpeed(this);      _transRaceToRace = new RaceToRaceTransition(this);      //events      addEventListener(Event.ADDED_TO_STAGE, onAddToStage);      _options.radioRaceView.addEventListener(StatsRadioGroup.SELECTION_CHANGE,                                               onRaceViewChange);      _options.gapSlider.addEventListener(StatsSlider.VALUE_CHANGE, onGapLengthChange);      //pools      var item = new RiderItem(this);      var itemClassName = getQualifiedClassName(item).split("::").join(".");      _itemPool = new ObjectPool(itemClassName, _nonFinalRiders);      _finalItemPool = new ObjectPool(itemClassName, _finalRiders);      var speedBar = new RiderSpeedBar(this);      var speedBarClassName =         getQualifiedClassName(speedBar).split("::").join(".");      _speedBarPool = new ObjectPool(speedBarClassName, _speedBars);      //etc      _podium.visible = false;      _finalLapOutline.alpha = 0;      _podiumOutline.alpha = 0;      _options.visible = false;      _riders.mouseEnabled = false;      _nonFinalRiders.mouseEnabled = false;    }    /**********************     * SETTER/GETTER     **********************/    public function get vGrid():VertRaceGrid {      return _vGrid;    }    public function get hGrid():HorzRaceGrid {      return _hGrid;    }    public function get vGridWidth():int {      return _vGridWidth;    }    public function get hGridHeight():int {      return _hGridHeight;    }    public function get riders():TweeningSprite {      return _riders;    }    public function get finalRiders():Array {      return _finalRiderItemsList;    }    public function get speedBars():TweeningSprite {      return _speedBars;    }    public function get podiumOutline():PodiumOutline {      return _podiumOutline;    }    public function get finalLapOutline():FinalLapOutline {      return _finalLapOutline;    }    public function get riderItemList():Array {      return _riderItemsList;    }    public function get options():RaceOptions {      return _options;    }    public function get currRaceView():String {      return _currRaceView;    }    /**********************     * PUBLIC     **********************/    public function createFinishRiderItem(lapNumber:int,                                           riderNumber:int):RiderItem {      var item:RiderItem = null;      var riderLapModel:RiderLapModel =         RaceModel.getInstance().getRiderLapModel(lapNumber, riderNumber);      if (riderLapModel) {          item = _finalItemPool.getObject(this) as RiderItem;          item.model = riderLapModel;          _finalRiders.addChild(item);          _finalRiderItemsList.push(item);      }      return item;    }    //-------//    public function initialize():void {      //create rider items            _riderItemsList = [];      _itemPool.returnAllObjects();      _finalRiderItemsList = [];      _finalItemPool.returnAllObjects();      var raceModel:RaceModel = RaceModel.getInstance();      _vGridWidth = (raceModel.lapCount - 1) * GRID_X_SPACING;      _hGridHeight = (raceModel.gridSize - 1) * GRID_Y_SPACING - 80;      var riderLapModels:Array;      var item:RiderItem;      for (var i:int = 0; i < raceModel.lapCount; i++) {        riderLapModels = raceModel.getRiderLapModelsForLap(i);        for (var j:int = 0; j < riderLapModels.length; j++) {          item = _itemPool.getObject(this) as RiderItem;          item.model = riderLapModels[j];          item.alpha = 1;          //item.moveToLap(false);          //item.moveToPosition(false);          _nonFinalRiders.addChild(item);          _riderItemsList.push(item);        }      }      //create rider bars      var bar:RiderSpeedBar;      var riderRaceModels:Array = raceModel.getRiderRaceModels();      _speedBarPool.returnAllObjects();      for (i = 0; i < riderRaceModels.length; i++) {        if (raceModel.getFinalPosForRider(              riderRaceModels[i].riderModel.riderNum) > -1) {          bar = _speedBarPool.getObject(this) as RiderSpeedBar;          bar.model = riderRaceModels[i];          _speedBars.addChild(bar);        }      }    }        //--------//    public function hide():TweenGroup {      _riders.addChild(_finalRiders);      _hideTweenGroup.reset();      _hideTweenGroup.addTween(_podium.tween("x", stage.stageWidth));      //_hideTweenGroup.addTween(options.tween("x", -_options.width));      _hideTweenGroup.addTween(_nonFinalRiders.tween("alpha", 0));      _hideTweenGroup.addTween(speedBars.tween("alpha", 0));      return _hideTweenGroup;    }    //--------//    public function show():void {      var tween:Tween = _nonFinalRiders.tween("alpha", 1);      tween.addEventListener(TweenEvent.MOTION_STOP, onShowRaceFinish);      setupMiscellany();      //setup podium      _podium.x = stage.stageWidth;      _podium.y = stage.stageHeight - _podium.height - 20;      _podium.tween("x", stage.stageWidth - _podium.width - 10);      //setup options      _options.gapSlider.maximum = RaceModel.getInstance().maxGap;      //_options.x = -_options.width;      //_options.tween("x", 0);      _options.visible = true;    }        //--------//    public function setupMiscellany():void {      //setup podium      _podium.update();      _podium.visible = true;      //setup final lap outline      var nh = (RaceModel.getInstance().finishSize - 1) * Race.GRID_Y_SPACING;      if (_currRaceView == "GAP") { nh = RACE_GAP_HEIGHT_RANGE; }      _finalLapOutline.x = _vGridWidth;            _finalLapOutline.update(nh);      _finalLapOutline.alpha = _currRaceView == "SPEED" ? 0 : 1;      //setup podium outline      _podiumOutline.update();      _podiumOutline.alpha = _currRaceView == "GAP" ? 0 : 1;    }    //--------//    public function showNewRace():void {      _transRaceToRace.start();    }    //--------//    public function doOverRider(riderNumber:Number):void {      dispatchEvent(new RiderItemEvent(RIDER_ITEM_MOUSE_OVER, riderNumber));    }    /**********************     * HANDLERS     **********************/    private function onAddToStage(e:Event):void {      var model:RaceModel = RaceModel.getInstance();      _vGridWidth = (model.lapCount - 1) * GRID_X_SPACING;      _hGridHeight = (model.gridSize - 1) * GRID_Y_SPACING - 80;      _options.y = stage.stageHeight - 30;            stage.addEventListener(Event.RESIZE, onStageResize);    }    //--------//    private function onStageResize(e:Event):void {      _hGrid.y = Math.round((stage.stageHeight - _hGridHeight)/2);      _hGrid.width = stage.stageWidth;      _vGrid.x = Math.round((stage.stageWidth - _vGridWidth)/2);      _vGrid.height = stage.stageHeight;      _riders.x = _vGrid.x;      _riders.y = _hGrid.y;      _podium.x = stage.stageWidth - _podium.width - 10;      _podium.y = stage.stageHeight - _podium.height - 20;      _options.y = stage.stageHeight - 30;    }    //--------//    private function onShowRaceFinish(e:TweenEvent):void {      _riders.removeChild(_finalRiders);      _finalRiderItemsList = [];      _finalItemPool.returnAllObjects();    }    //--------//    private function onRaceViewChange(e:Event):void {      var group:StatsRadioGroup = e.target as StatsRadioGroup;      var sel:SelectableButton = group.selection;            var main:MotoGP = root as MotoGP;      if (main.currentView == "season") {         _currRaceView = sel.label;        return;       }      switch(sel.label) {      case "LAP":        _transToLap.start();        break;      case "GAP":        _transToGap.start();        break;      case "SPEED":        _transToSpeed.start();        break;      }      _currRaceView = sel.label;    }    //--------//    private function onGapLengthChange(e:Event):void {      _transToGap.updateY();      //trace((e.target as Slider).value);    }  }}