package com.season.classes.season {    import caurina.transitions.Tweener;        import com.season.components.*;    import com.season.models.*;    import com.season.utils.*;        import flash.display.Sprite;    import flash.events.*;    import flash.text.*;    import flash.utils.*;        import mylibrary.utils.*;    import mylibrary.utils.anim.*;    /**********************     *     * Season     *     **********************/    public class Season extends TweeningSprite {        /**********************         * VARIABLES         **********************/        private var _gridHeight:int = 0;        private var _gridWidth:int = 0;        private var _summaryPool:ObjectPool;        private var gridV:SeasonVertGrid = new SeasonVertGrid();        private var gridH:SeasonHorzGrid = new SeasonHorzGrid();        private var titleYAxis:TextField;        private var scroller:Scroller;        private var scrollerHeight:int = 0;        private var summaries:Array = [];		private var _riderLabels : Sprite;		        //----//        public static const GRID_X_OFFSET = 70;        public static const GRID_Y_OFFSET = 120;        public static const HIDE_SUMMARIES_FINISH:String = "hideSummariesFinish";        public static const POINT_SIZE_FACTOR:Number = 1.5;        public static const MIN_POINT_TOTAL:int = 400;        public static const GRID_HEIGHT : Number = 600;        /**********************         * CONSTRUCTOR         **********************/        public function Season()         {            var season = SeasonModel.getInstance();                        y = GRID_Y_OFFSET;                        _gridWidth = season.raceCount *                 (RiderSeasonBar.BAR_WIDTH + RiderSeasonBar.BAR_SPACING) + 60;            //grids            //gridH.x = GRID_X_OFFSET;            // gridV.x = GRID_X_OFFSET;            addChild(gridH);			// rider labels			_riderLabels = new Sprite ();			gridH.addChild (_riderLabels);						            /*            //scroller            scroller = new Scroller(gridV);            scroller.x = GRID_X_OFFSET;            scroller.y = -100;            scrollerHeight = MIN_POINT_TOTAL * POINT_SIZE_FACTOR + 200;            //scroller.y = -RiderSeasonSummary.BACKGROUND_HEIGHT/2 - 10;            gridV.y = 100;            addChild(scroller);            scroller.addChild(gridV);            */            addChild( gridV );            //pool            var summary = new RaceSeasonBar( this );            var itemClassName = getQualifiedClassName(summary).split("::").join(".");            _summaryPool = new ObjectPool(itemClassName, gridV.contents);                        //events            addEventListener(Event.ADDED_TO_STAGE, onAddToStage);            /* ***** ORIGINAL *******              y = GRID_Y_OFFSET;                          _gridHeight = POINT_SIZE_FACTOR * MIN_POINT_TOTAL;              _gridWidth = SeasonModel.getInstance().riderCount *               (RiderSeasonBar.BAR_WIDTH + RiderSeasonBar.BAR_SPACING) + 60;              //grids              //gridH.x = GRID_X_OFFSET;              // gridV.x = GRID_X_OFFSET;              addChild(gridH);              //scroller              scroller = new Scroller(gridV);              scroller.x = GRID_X_OFFSET;              scroller.y = -100;              scrollerHeight = MIN_POINT_TOTAL * POINT_SIZE_FACTOR + 200;              //scroller.y = -RiderSeasonSummary.BACKGROUND_HEIGHT/2 - 10;              gridV.y = 100;              addChild(scroller);              scroller.addChild(gridV);              //y axis title              var titleTextStyle:TextFormat =               TextFactory.createTextFormat(TextStyle.BOLD, 0x9D9D9D);              titleYAxis = TextFactory.createText(titleTextStyle);              titleYAxis.text = "WORLD STANDING";              addChild(titleYAxis);              titleYAxis.y = _gridHeight + 40;              //pool              var summary = new RiderSeasonBar();              var itemClassName = getQualifiedClassName(summary).split("::").join(".");              _summaryPool = new ObjectPool(itemClassName, gridV.contents);              //events              addEventListener(Event.ADDED_TO_STAGE, onAddToStage);            */        }        /**********************         * GETTER/SETTER         **********************/        public function get gridHeight():int {            return GRID_HEIGHT;        }        public function get gridWidth():int {            return _gridWidth;        }        public function get vGrid():SeasonVertGrid {            return gridV;        }        public function get hGrid():SeasonHorzGrid {            return gridH;        }        /**********************         * PUBLIC         **********************/        public function getCurrRaceSquares():Array {            var squareArray:Array = [];            var square:RacePointSquare = null;                  for (var i:int = 0; i < summaries.length; i++) {                square = summaries[i].currRaceSquare;                if (square) {                    squareArray.push(square);                }                    }            return squareArray;        }        //--------//        public function initSeason():void         {            trace("Initseason", gridH.width);            gridV.initGrid();            gridH.initGrid();            _gridWidth = SeasonModel.getInstance().raceCount *                 (RiderSeasonBar.BAR_WIDTH + RiderSeasonBar.BAR_SPACING) + 60;                        var seasonModel:SeasonModel = SeasonModel.getInstance();									for ( var i : int = 0; i < seasonModel.raceCount; i++ ) {				var raceModel : SeasonRaceModel = seasonModel.getRaceModelByIndex( i );				if ( !raceModel.hasData ) {					createRiderLabels (i - 1);					break;				}								var sum : RaceSeasonBar = _summaryPool.getObject(this) as RaceSeasonBar;				sum.model = raceModel;								sum.x = Math.round ( (i + 1 ) * (RiderSeasonBar.BAR_WIDTH + RiderSeasonBar.BAR_SPACING) - RiderSeasonBar.BAR_WIDTH/2);				sum.y = gridHeight;								summaries.push (sum);							}						/*            summaries = [];            //rider summary            var riders:XMLList = seasonModel.riderList;            for (var i:int = 0; i < riders.length(); i++) {                var model:RiderSeasonModel = new RiderSeasonModel(riders[i]);                var sum:RiderSeasonBar= _summaryPool.getObject() as RiderSeasonBar;                sum.model = model;                sum.y = gridHeight - 399;                if (sum.alpha != 1) {                    sum.tween("alpha", 1);                }                summaries.push(sum);            }			*/                        onStageResize(null);            /*              scroller.shift(0);              trace("Initseason", gridH.width);              gridV.initGrid();              gridH.initGrid();              _gridWidth = SeasonModel.getInstance().riderCount *               (RiderSeasonBar.BAR_WIDTH + RiderSeasonBar.BAR_SPACING) + 60;              var seasonModel:SeasonModel = SeasonModel.getInstance();              summaries = [];              //rider summary              var riders:XMLList = seasonModel.riderList;              for (var i:int = 0; i < riders.length(); i++) {              var model:RiderSeasonModel = new RiderSeasonModel(riders[i]);              var sum:RiderSeasonBar= _summaryPool.getObject() as RiderSeasonBar;              sum.model = model;              sum.y = gridHeight - 399;              if (sum.alpha != 1) {              sum.tween("alpha", 1);              }              summaries.push(sum);              }              onStageResize(null);            */        }        //--------//        public function hideSummaries():void {            var groupTween:TweenGroup = new TweenGroup();            var summary:RiderSeasonBar;            for (var i:int = 0; i < summaries.length; i++) {                summary = summaries[i];                groupTween.addTween(summary.tween("alpha", 0));                summary.model = null;            }            groupTween.addEventListener(EventGroup.GROUP_FINISH, onHideFinish);        }        /**********************         * HANDLERS         **********************/        private function onAddToStage(e:Event):void {            stage.addEventListener(Event.RESIZE, onStageResize);            onStageResize(e);        }        //--------        private function onStageResize(e:Event):void {            var nx = Math.max(Math.round((stage.stageWidth - _gridWidth)/2), 100);            var nw = Math.min(_gridWidth, stage.stageWidth - nx - 40);            gridH.x = nx;            gridH.resize(nw);            gridV.resize(_gridWidth);            gridV.x = nx;			            /* ORIGINAL            scroller.resize(stage.stageWidth - nx - 40, scrollerHeight);            scroller.x = nx;            titleYAxis.x = (nw - titleYAxis.width)/2 + nx;            */        }        //--------        private function onHideFinish(e:Event):void {            _summaryPool.returnAllObjects();            _gridWidth = SeasonModel.getInstance().riderCount *                 (RiderSeasonBar.BAR_WIDTH + RiderSeasonBar.BAR_SPACING) + 60;            var nx = Math.max(Math.round((stage.stageWidth - _gridWidth)/2), 100);            var nw = Math.min(_gridWidth, stage.stageWidth - nx - 40);            if (gridH.x == nx) {                 onShiftFinish();                return;            }            Tweener.addTween(gridH, {x: nx, time: .4, transition: "easeInOutSine"});            Tweener.addTween(scroller, {x: nx, time: .4, transition: "easeInOutSine"});            Tweener.addTween(titleYAxis,             {x: Math.round((nw - titleYAxis.width)/2) + nx, time: .4,                     transition: "easeInOutSine", onComplete: onShiftFinish});        }        //--------        private function onShiftFinish():void {            dispatchEvent(new Event(HIDE_SUMMARIES_FINISH));        }				//--------		// rider labels -> TO DO:  POOL		private function createRiderLabels (lastIndex : int) : void		{			_riderLabels.x = Math.round ((lastIndex + 0) * (RiderSeasonBar.BAR_WIDTH + RiderSeasonBar.BAR_SPACING) + 90);			_riderLabels.y = gridHeight;						var seasonModel : SeasonModel     = SeasonModel.getInstance();			var raceModel   : SeasonRaceModel = seasonModel.getRaceModelByIndex (lastIndex);			var standings   : XML;			var riderModel  : RiderStandingModel;						var fields : Array = [];			// squares			for (var i : int = 0; i < raceModel.standingsList.length (); i++) {								standings = raceModel.standingsList [i];				riderModel = new RiderStandingModel (standings);								var label : RiderSeasonLabel = new RiderSeasonLabel (this);				label.model = riderModel;				label.y     = Math.round (-standings.@pt * hGrid.scaleFactor) - 6;								var squareHeight : int  = riderModel.racePoints * hGrid.scaleFactor;				if (squareHeight < 5) {					label.y = Math.round (-standings.@pt * hGrid.scaleFactor - 						(Math.max (3, squareHeight) + label.height)/2);				}								_riderLabels.addChild (label);								fields [riderModel.worldPlace - 1] = label;			}						// fit the names			for (var j : int = 0; j < fields.length; j++) {				if (j == 0) { continue; }								var curr : RiderSeasonLabel = fields [j] as RiderSeasonLabel;                				var prev : RiderSeasonLabel = fields [j - 1] as RiderSeasonLabel;								if (curr.y - prev.y < 8) {					curr.y = prev.y + 8;				}			}					}    }}