package com.season.classes.season {  import flash.display.Sprite;  import flash.events.*;  import flash.text.*;  import flash.utils.*;  import caurina.transitions.Tweener;  import com.season.components.*;  import com.season.models.*;  import com.season.utils.*;  import mylibrary.utils.anim.*;  import mylibrary.utils.*;  /**********************   *   * Season   *   **********************/  public class Season extends TweeningSprite {    /**********************     * VARIABLES     **********************/    private var _gridHeight:int = 0;    private var _gridWidth:int = 0;    private var _summaryPool:ObjectPool;    private var gridV:SeasonVertGrid = new SeasonVertGrid();    private var gridH:SeasonHorzGrid = new SeasonHorzGrid();    private var titleYAxis:TextField;    private var scroller:Scroller;    private var scrollerHeight:int = 0;    private var summaries:Array = [];    //----//    public static const GRID_X_OFFSET = 70;    public static const GRID_Y_OFFSET = 120;    public static const HIDE_SUMMARIES_FINISH:String = "hideSummariesFinish";    public static const POINT_SIZE_FACTOR:Number = 1.5;    public static const MIN_POINT_TOTAL:int = 400;    /**********************     * CONSTRUCTOR     **********************/    public function Season() {      var season = SeasonModel.getInstance();      y = GRID_Y_OFFSET;      _gridHeight = POINT_SIZE_FACTOR * MIN_POINT_TOTAL;      _gridWidth = SeasonModel.getInstance().riderCount *         (RiderSeasonBar.BAR_WIDTH + RiderSeasonBar.BAR_SPACING) + 60;      //grids      //gridH.x = GRID_X_OFFSET;      // gridV.x = GRID_X_OFFSET;      addChild(gridH);      //scroller      scroller = new Scroller(gridV);      scroller.x = GRID_X_OFFSET;      scroller.y = -100;      scrollerHeight = MIN_POINT_TOTAL * POINT_SIZE_FACTOR + 200;      //scroller.y = -RiderSeasonSummary.BACKGROUND_HEIGHT/2 - 10;      gridV.y = 100;      addChild(scroller);      scroller.addChild(gridV);      //y axis title      var titleTextStyle:TextFormat =         TextFactory.createTextFormat(TextStyle.BOLD, 0x9D9D9D);      titleYAxis = TextFactory.createText(titleTextStyle);      titleYAxis.text = "WORLD STANDING";      addChild(titleYAxis);      titleYAxis.y = _gridHeight + 40;      //pool      var summary = new RiderSeasonBar();      var itemClassName = getQualifiedClassName(summary).split("::").join(".");      _summaryPool = new ObjectPool(itemClassName, gridV.contents);      //events      addEventListener(Event.ADDED_TO_STAGE, onAddToStage);    }    /**********************     * GETTER/SETTER     **********************/    public function get gridHeight():int {      return _gridHeight;    }    public function get gridWidth():int {      return _gridWidth;    }    public function get vGrid():SeasonVertGrid {      return gridV;    }    public function get hGrid():SeasonHorzGrid {      return gridH;    }    /**********************     * PUBLIC     **********************/    public function getCurrRaceSquares():Array {      var squareArray:Array = [];      var square:RacePointSquare = null;            for (var i:int = 0; i < summaries.length; i++) {        square = summaries[i].currRaceSquare;        if (square) {          squareArray.push(square);        }              }      return squareArray;    }    //--------//    public function initSeason():void {      scroller.shift(0);      trace("Initseason", gridH.width);      gridV.initGrid();      gridH.initGrid();      _gridWidth = SeasonModel.getInstance().riderCount *         (RiderSeasonBar.BAR_WIDTH + RiderSeasonBar.BAR_SPACING) + 60;      var seasonModel:SeasonModel = SeasonModel.getInstance();      summaries = [];      //rider summary      var riders:XMLList = seasonModel.riderList;      for (var i:int = 0; i < riders.length(); i++) {        var model:RiderSeasonModel = new RiderSeasonModel(riders[i]);        var sum:RiderSeasonBar= _summaryPool.getObject() as RiderSeasonBar;        sum.model = model;        sum.y = gridHeight - 399;        if (sum.alpha != 1) {          sum.tween("alpha", 1);        }        summaries.push(sum);      }      onStageResize(null);    }    //--------//    public function hideSummaries():void {      var groupTween:TweenGroup = new TweenGroup();        var summary:RiderSeasonBar;        for (var i:int = 0; i < summaries.length; i++) {          summary = summaries[i];          groupTween.addTween(summary.tween("alpha", 0));          summary.model = null;        }        groupTween.addEventListener(EventGroup.GROUP_FINISH, onHideFinish);    }    /**********************     * HANDLERS     **********************/    private function onAddToStage(e:Event):void {      stage.addEventListener(Event.RESIZE, onStageResize);      onStageResize(e);    }    //--------    private function onStageResize(e:Event):void {      var nx = Math.max(Math.round((stage.stageWidth - _gridWidth)/2), 100);      var nw = Math.min(_gridWidth, stage.stageWidth - nx - 40);      gridH.x = nx;      gridH.resize(nw);      gridV.resize(_gridWidth);      scroller.resize(stage.stageWidth - nx - 40, scrollerHeight);      scroller.x = nx;      titleYAxis.x = (nw - titleYAxis.width)/2 + nx;    }    //--------    private function onHideFinish(e:Event):void {      _summaryPool.returnAllObjects();      _gridWidth = SeasonModel.getInstance().riderCount *         (RiderSeasonBar.BAR_WIDTH + RiderSeasonBar.BAR_SPACING) + 60;      var nx = Math.max(Math.round((stage.stageWidth - _gridWidth)/2), 100);      var nw = Math.min(_gridWidth, stage.stageWidth - nx - 40);      if (gridH.x == nx) {         onShiftFinish();        return;      }      Tweener.addTween(gridH, {x: nx, time: .4, transition: "easeInOutSine"});      Tweener.addTween(scroller, {x: nx, time: .4, transition: "easeInOutSine"});      Tweener.addTween(titleYAxis,         {x: Math.round((nw - titleYAxis.width)/2) + nx, time: .4,         transition: "easeInOutSine", onComplete: onShiftFinish});    }    //--------    private function onShiftFinish():void {      dispatchEvent(new Event(HIDE_SUMMARIES_FINISH));    }  }}